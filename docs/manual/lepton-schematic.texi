@node lepton-schematic, lepton-netlist, Configuration, Top
@chapter Schematic capture
@cindex lepton-schematic
@cindex schematic capture

@menu
* Component libraries::
@end menu

@node Component libraries,  , lepton-schematic, lepton-schematic
@section Component libraries
@cindex component libraries

The global @emph{component library} of a project is made up of a
number of @emph{symbol libraries}, otherwise named @emph{component
resources}, each of which in turn makes available a number of
component @emph{symbols}.  Each resource may be either a directory on
disk containing symbol files, a command in the system @env{PATH} which
can generate symbol data (e.g. from a database), or a Scheme function
which can do likewise.

The component library system in Lepton manages component resources and
symbols, and abstracts the interface to the underlying storage.  The
libraries are used by all Lepton tools based on the code of the
@code{liblepton} library.

A directory which contains one or more symbol files in @ref{gEDA file
format} may be used as a component resource.  Each symbol file should
have a filename ending in @samp{.sym} (case insensitive).  A component
resource based on a directory can be added using the functions
@ref{component-library} or @ref{component-library-search}.  Symbol
files with filenames starting with a period @samp{.} are ignored.

An executable program in the system search path may be used as a
component resource.  A component resource based on a command may
be added using the function @ref{component-library-command}.

Scheme functions may be used as a component resource as well.  A
component resource based on Scheme functions may be added using the
function @ref{component-library-funcs}.

Each symbol is identified by its @emph{name}, which is stored in the
saved schematic file.  The name must be a valid for storage in a
Lepton schematic file as the @emph{basename} of a @emph{component} object.
For symbols from directory resources, the filename of the symbol is
taken as the symbol name.  For a command resource, the name may be any
permissible string.  Guidelines to follow:

@itemize
@item
Do not begin a symbol name with @samp{EMBEDDED}.
@item
Do not use whitespace, or any of the characters @samp{/:!*?}.
@item
Try to use unique names.
@end itemize


@menu
* Component library setup::
@end menu

@node Component library setup,  , Component libraries, Component libraries
@subsection Component library setup

Component library functions are Scheme procedures that should be
specified in one of @file{gafrc} files.  @xref{Legacy configuration}
for more information.

Environment variables are expanded in all component library functions
working with paths.  You can use, e.g. @samp{$@{HOME@}/lib/path} to
specify the directory you need.  You may form the path names with any
Scheme functions available as well.

The following commands are available:

@menu
* component-library::
* component-library-search::
* component-library-command::
* component-library-funcs::
* reset-component-library::
@end menu

@node component-library, component-library-search, Component library setup, Component library setup
@subsubsection component-library
@cindex component-library

The function @code{component-library} defines a directory containing
@emph{symbol} files as a component resource.  You should use it as
follows:

@lisp
(component-library path)
@end lisp
@noindent
or
@lisp
(component-library path name)
@end lisp

@var{path} is a path to the directory you want to add as a component
resource.  Environment variables in @var{path} are expanded.  Using
this function is convenient if you want each of your library to have a
unique descriptive name.  It can be specified with the second argument
@var{name}.  The name is optional, if it is omitted, @var{path} is
used instead.  The name will be displayed in the @samp{Select
component} window of @command{lepton-schematic}.  Obviously, it is
useless for CLI Lepton tools.


@node component-library-search, component-library-command, component-library, Component library setup
@subsubsection component-library-search
@cindex component-library-search

The function @code{component-library-search} is similar to
@ref{component-library} as it also defines a component resource from a
directory on disk.  However, it adds all the directories in it
recursively as a tree of several component resources.  This approach
is good when you don't want to list each separate subdirectory in the
root directory.  But then you won't be able to specify unique names
for the subdirectories.

The usage is as follows:

@lisp
(component-library-search path)
@end lisp
@noindent
or
@lisp
(component-library-search path prefix)
@end lisp

Here @var{path} is a root directory from which you want to make a tree
of component resources.  If optional @var{prefix} is specified, it
will be prepended to the names of the new libraries.


@node component-library-command, component-library-funcs, component-library-search, Component library setup
@subsubsection component-library-command
@cindex component-library-command

A program or set of programs can be used as a component resource.  The
procedure used to add such a resource from a Lepton RC file is:

@example
(component-library-command list-command get-command name)
@end example

The code adds a new library named @var{name}.  The @var{list-command}
argument specifies a name of the program that will be executed with no
further arguments, and should output a list of available symbol names
on stdout.  The @var{get-command} argument specifies another program
that should take a symbol name as its only argument, and output symbol
data in @ref{gEDA file format} on stdout.

If the command cannot successfully complete, it should exit with
non-zero exit status.  Anything it has output on stdout will be
ignored, and any stderr output displayed to the user.

This is the contents of an example script:

@example
@include cmd-component.sh
@end example

As can be seen from the code, the script can function as list command,
if the option @option{-l} is given, or as get command, if file name is
given.  Otherwise, if no arguments given, it exits with an error code.
If the script is named, say, @file{cmd-component.sh}, then the
following code in @file{gafrc} file will define a new component
library:

@lisp
(define list-command "cmd-component.sh")
(define get-command (string-append list-command " -l"))
(component-library-command list-command get-command "simple-cmd-lib")
@end lisp

Likewise, you can use various symbol generators written in various
languages.

@node component-library-funcs, reset-component-library, component-library-command, Component library setup
@subsubsection component-library-funcs
@cindex component-library-funcs

A set of Scheme procedures can be used as a component resource.  The
procedure used to add such a resource from a Lepton RC file is:

@lisp
(component-library-funcs list-function get-function name)
@end lisp

@var{list-function} and @var{get-function} must both be Guile
procedures.  @var{list-function} takes no arguments, and returns a
list of symbol names as Scheme strings.  @var{get-function} takes a
symbol name as an argument, and returns symbol data in @ref{gEDA file
format} in a Scheme string, or @code{#f} if not known.  The @var{name}
argument specifies the name of the new library.

Thus, the user may take advantage of using currently available Scheme
procedures for creating schematic objects.  For example:

@lisp
@include scm-component.scm
@end lisp

The code defines three symbols.  You can see that some steps are
automated in the example for the first two of them: creating
attributes and stroke parameter setting for line objects.  Some other
things are obscure though, like @code{toplevel} stuff.  However, this
is how it currently works.

You may also notice that the last symbol, @samp{dummy.sym}, is defined
just as a string in the @ref{gEDA file format}.  You can do so as
well, though either you lose any automation, or you have to deal with
strings instead of Lepton Scheme objects.

Put the code in some file and load it from your @file{gafrc}, e.g.:

@lisp
(primitive-load "scm-component.scm")
@end lisp
@noindent
or put it directly to @file{gafrc}.


@node reset-component-library,  , component-library-funcs, Component library setup
@subsubsection reset-component-library
@cindex reset-component-library

@code{reset-component-library} initializes, i.e. empties the global
component library.  Thus, the user can define a new set of component
resources from scratch.  For example, sometimes it is convenient to
get rid of default symbols in the library window of
@command{lepton-schematic} and work only with those in your own custom
libraries.

Use the command before other component library commands, such as
@ref{component-library}.

Supposed you want some of your projects to use only special symbol
libraries, then the typical usage is as follows.  First reset all
libraries, then populate the component library with your directories,
e.g.:

@lisp
(reset-component-library)

(component-library-search "$@{HOME@}/lepton/symbols")
@end lisp

The good place to do so is @file{gafrc} in your project's directory.
However, you can also disable default libraries completely by writing
such lines in @file{gafrc} in the directory with your user's settings.
@xref{Legacy configuration} for more information on configuration
paths.
