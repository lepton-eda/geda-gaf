#!/bin/sh
export GUILE_LOAD_COMPILED_PATH="@ccachedir@:${GUILE_LOAD_COMPILED_PATH}"
exec @GUILE@ "$0" "$@"
!#

;;
;; Lepton EDA
;; lepton-upcfg - gEDA => Lepton EDA configuration upgrade utility
;; Copyright (C) 2019 dmn <graahnul.grom@gmail.com>
;; License: GPLv2+. See the COPYING file
;;

( load-extension ( or (getenv "LIBLEPTON") "@libdir@/liblepton" )
                 "libgeda_init" )

; Avoid Scheme compile-time errors using a clever trick
; from netlist/scheme/lepton-netlist.in (see comments there):
;
( primitive-eval '(use-modules (ice-9 format)) )
( primitive-eval '(use-modules (lepton legacy-config)) )
( primitive-eval '(use-modules (ice-9 getopt-long)) )
( primitive-eval '(use-modules (lepton version)) )



; command line options:
;
( define cmd-line-args-spec
( list
  ( list ; --local (-l)
    'local
    ( list 'single-char #\l )
    ( list 'value        #f )
  )
  ( list ; --user (-u)
    'user
    ( list 'single-char #\u )
    ( list 'value        #f )
  )
  ( list ; --system (-s)
    'system
    ( list 'single-char #\s )
    ( list 'value        #f )
  )
  ( list ; --overwrite (-x)
    'overwrite
    ( list 'single-char #\x )
    ( list 'value        #f )
  )
  ( list ; --help (-h)
    'help
    ( list 'single-char #\h )
    ( list 'value        #f )
  )
)
) ; cmd-line-args-spec



( define ( usage exit-code )
  ( format #t "~
Usage: lepton-upcfg -l | -u | -s [-x] | -h

Lepton EDA configuration upgrade utility.
Converts geda*.conf configuration files
to corresponding lepton*.conf files.

Options:
  -l, --local      geda.conf => lepton.conf
                   (in current directory)
  -u, --user       geda-user.conf => lepton-user.conf
                   (in user configuration directory)
  -s, --system     geda-system.conf => lepton-system.conf
                   (in system configuration directory)
  -x, --overwrite  Overwrite existing files
  -h, --help       Show usage information

Report bugs at <~a>
Lepton EDA homepage: <~a>
"
    ( lepton-version 'bugs )
    ( lepton-version 'url )
  )

  ( primitive-exit exit-code )
)



; program entry point:
;
( define ( main )
( let
  (
  ( cmd-line-args '() )
  ( args-len       0  )
  ( what           #f )
  ( overwrite      #f )
  ( fname          #f )
  )

  ( set! cmd-line-args
    ( getopt-long (program-arguments) cmd-line-args-spec )
  )

  ( set! args-len (length cmd-line-args) )
  ( when ( or (< args-len 2) (> args-len 3) )
    ( usage 1 )
  )

  ( if (option-ref cmd-line-args 'help #f)
    ( usage 0 )
  )

  ( if (option-ref cmd-line-args 'local #f)
    ( set! what 'local )
  )
  ( if (option-ref cmd-line-args 'user #f)
    ( set! what 'user )
  )
  ( if (option-ref cmd-line-args 'system #f)
    ( set! what 'system )
  )

  ( unless what
    ( usage 1 )
  )

  ( set! overwrite (option-ref cmd-line-args 'overwrite #f) )


  ( catch #t
    ( lambda()
      ( format #t "ii: converting [~a] configuration...~%~%" what )
      ( set! fname
        ( config-upgrade what #:report-absent-keys #f #:overwrite overwrite )
      )
    )
    ( lambda( ex . args )
      ( format #t "xx: config-upgrade() failed: ['~a]~%  ~a~%" ex args )
    )
  )

) ; let
) ; main()



; top-level code:
;
( main )

